import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-05-26T12:29:09.545-03:00[America/Buenos_Aires]
 * <br>
*  The generated test suite contains 22 tests
 * <br>
*  Covered targets: 102
 * <br>
*  Used time: 0h 1m 13s
 * <br>
*  Needed budget for current results: 100%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "https://petstore3.swagger.io";
    
    
    @BeforeAll
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (500) DELETE:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test @Timeout(60)
    public void test_0_with500() throws Exception {
        
        // Fault100. HTTP Status 500. DELETE:/api/v3/user/{username}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/v3/user/{username} -> No response body is expected but one was found.
        given().accept("*/*")
                .delete(baseUrlOfSut + "/api/v3/user/JOMVo")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test @Timeout(60)
    public void test_1_with500() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/api/v3/user/{username}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/user/{username} -> No response body is expected but one was found.
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/v3/user/Sb")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/v3/store/inventory
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test @Timeout(60)
    public void test_2_with500() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/api/v3/store/inventory
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/store/inventory -> No response body is expected but one was found.
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/v3/store/inventory")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/user/createWithList
    * Found 2 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   john@email.com
    */
    @Test @Timeout(60)
    public void test_3_with500() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/api/v3/user/createWithList
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/user/createWithList -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"firstName\": \"j14\", " + 
                    " \"lastName\": \"qTyePrEiu\", " + 
                    " \"email\": \"john@email.com\", " + 
                    " \"phone\": \"n\" " + 
                    " }, " + 
                    " { " + 
                    " \"username\": \"4soSSZiyrEWT\", " + 
                    " \"firstName\": \"lyn4Af92VPN\", " + 
                    " \"lastName\": \"QcL1XCj\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 796, " + 
                    " \"firstName\": \"YVyG5VsTuWg8I\", " + 
                    " \"lastName\": \"P0avYO1EsDn\", " + 
                    " \"phone\": \"25d5bxRcs1v1M\" " + 
                    " }, " + 
                    " { " + 
                    " \"username\": \"uk2lOq\", " + 
                    " \"firstName\": \"w4ryS3uevmIKU55P\", " + 
                    " \"lastName\": \"D\", " + 
                    " \"phone\": \"\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/api/v3/user/createWithList")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/user
    * Found 2 potential faults. Type-codes: 100, 200
    * Using 2 examples:
    *   12345
    *   john@email.com
    */
    @Test @Timeout(60)
    public void test_4_with500() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/api/v3/user
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/user -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("firstName=njzvV9jReiv&lastName=IQ9lONvEK7m7l7X&email=john%40email.com&password=12345&phone=orsw587MaUD3x&userStatus=843")
                .post(baseUrlOfSut + "/api/v3/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/store/order
    * Found 2 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   7
    */
    @Test @Timeout(60)
    public void test_5_with500() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/api/v3/store/order
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/store/order -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("id=614&quantity=7&shipDate=1956-08-26T08%3A37%3A58%2B04%3A05&status=placed")
                .post(baseUrlOfSut + "/api/v3/store/order")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/v3/pet
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test @Timeout(60)
    public void test_6_with500() throws Exception {
        
        // Fault100. HTTP Status 500. PUT:/api/v3/pet
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/v3/pet -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("name=ORJCQb&category=%7B%22id%22%3A-786524045883183262%7D&photoUrls=%5B%22H2TLMG6Q1Z1K4e%22%2C+%22Lf0M5T%22%2C+%22bEr7gMNSo8hi%22%2C+%229Zz3D9J%22%2C+%22KlcNC2%22%5D&tags=%5B%5D")
                .put(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/pet
    * Found 2 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   1
    */
    @Test @Timeout(60)
    public void test_7_with500() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/api/v3/pet
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/pet -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"pd$-3yY#M{J-![}K/sQf1m}%OZ?4KX77O;-Af(}BPZ\u0027vFcef:Uz|9OqE\", " + 
                    " \"category\": { " + 
                    " \"id\": 1 " + 
                    " }, " + 
                    " \"photoUrls\": [ " + 
                    " \"url1\", " + 
                    " \"NeQ?C\" " + 
                    " ], " + 
                    " \"tags\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v3/user/logout
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_8() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/user/logout -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/v3/user/logout")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("User logged out"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_9() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/v3/pet/{petId} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("api_key", "A8ExEXVXtCP5Pkkm")
                .delete(baseUrlOfSut + "/api/v3/pet/726")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Pet deleted"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/api/v3/pet
    * 2 - (200) GET:/api/v3/pet/findByStatus
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_10() throws Exception {
        
        String location_pet = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("id=-1466492115923858020&name=%3D5D5wJO2%28%28ANMN%27%60zSNgK-Z58%29IR%7Ezf&photoUrls=%5B%22lDrFxEgH%22%2C+%22url1%22%2C+%22F%28rm0o%3A-qO%60%25k%7CIb%5Df5cc9u54%3BvPK%25PvJ%7DD%24PqZTw%3A%7C_%28MxMz%22%2C+%22F%28rm0o%3A-qO%60%25k%7CIb%5Df5cc9u54%3BvPK%25PvJ%7DD%24PqZTw%3A%7C_%28MxMz%22%5D&tags=%5B%7B%7D%2C+%7B%22name%22%3A%22q%2CUVG%23%23UuIMllP%5BL9%5DxxN%7E74kbtwY%7B%5B%2B%22%7D%5D")
                .post(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("=5D5wJO2((ANMN'`zSNgK-Z58)IR~zf"))
                .body("'photoUrls'.size()", equalTo(0))
                .body("'tags'.size()", equalTo(1))
                .body("'tags'[0].'name'", containsString("q,UVG##UuIMllP[L9]xxN~74kbtwY{[+"));
        location_pet = "/api/v3/pet" + "/" + res_0.extract().body().path("id").toString();
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/pet/findByStatus -> Instance type (object) does not match any allowed primitive type (allowed: ["array"])
        given().accept("application/json")
                .get(resolveLocation(location_pet, baseUrlOfSut + "/api/v3/pet/findByStatus"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("=5D5wJO2((ANMN'`zSNgK-Z58)IR~zf"))
                .body("'photoUrls'.size()", equalTo(0))
                .body("'tags'.size()", equalTo(1))
                .body("'tags'[0].'name'", containsString("q,UVG##UuIMllP[L9]xxN~74kbtwY{[+"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/v3/user/{username}
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_11() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/v3/user/{username} -> No response body is expected but one was found.
        given().accept("*/*")
                .contentType("application/json")
                .put(baseUrlOfSut + "/api/v3/user/jH0eaOSh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No User provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v3/user
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_12() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/user -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/json")
                .post(baseUrlOfSut + "/api/v3/user")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No User provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/v3/pet/findByTags
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_13() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/pet/findByTags -> No response body is expected but one was found.
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/v3/pet/findByTags")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No tags provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/v3/pet/findByStatus
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_14() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/pet/findByStatus -> No response body is expected but one was found.
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/v3/pet/findByStatus")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No status provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_15() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/pet/{petId} -> No response body is expected but one was found.
        given().accept("application/json")
                .post(baseUrlOfSut + "/api/v3/pet/-362458315?status=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No Name provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_16() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/pet/{petId} -> No response body is expected but one was found.
        given().accept("application/json")
                .post(baseUrlOfSut + "/api/v3/pet/977")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No Name provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/v3/store/order/{orderId}
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_17() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/store/order/{orderId} -> No response body is expected but one was found.
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/v3/store/order/754")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Order not found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_18() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/pet/{petId} -> No response body is expected but one was found.
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/v3/pet/845")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Pet not found"));
    }
    
    
    /**
    * Calls:
    * (404) POST:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_19() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/pet/{petId} -> No response body is expected but one was found.
        given().accept("application/json")
                .post(baseUrlOfSut + "/api/v3/pet/716?name=W*e-yDS%5ETo%5Bmnlr%26Lg%7Drbw0V%2F%27%28uh%3F%26%3F55V%5BI%3D%28%237")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Pet not found"));
    }
    
    
    /**
    * Calls:
    * (415) POST:/api/v3/pet/{petId}/uploadImage
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_20() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/pet/{petId}/uploadImage -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/json")
                .body(" \"kItPNhiRet\" ")
                .post(baseUrlOfSut + "/api/v3/pet/-7607600514160304230/uploadImage")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(415.0))
                .body("'message'", containsString("HTTP 415 Unsupported Media Type"));
    }
    
    
    /**
    * Calls:
    * (415) POST:/api/v3/pet/{petId}/uploadImage
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_21() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/pet/{petId}/uploadImage -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/json")
                .body(" \"KdD\" ")
                .post(baseUrlOfSut + "/api/v3/pet/244/uploadImage")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(415.0))
                .body("'message'", containsString("HTTP 415 Unsupported Media Type"));
    }


}
