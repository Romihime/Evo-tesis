import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-05-09T18:04:17.727-03:00[America/Buenos_Aires]
 * <br>
*  The generated test suite contains 24 tests
 * <br>
*  Covered targets: 99
 * <br>
*  Used time: 0h 1m 4s
 * <br>
*  Needed budget for current results: 100%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "https://petstore3.swagger.io";
    
    
    @BeforeAll
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (500) DELETE:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test @Timeout(60)
    public void test_0_with500() throws Exception {
        
        // Fault100. HTTP Status 500. DELETE:/api/v3/user/{username}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/v3/user/{username} -> No response body is expected but one was found.
        given().accept("*/*")
                .delete(baseUrlOfSut + "/api/v3/user/RCgydjuijOlN9")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/user/createWithList
    * Found 2 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   theUser
    */
    @Test @Timeout(60)
    public void test_1_with500() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/api/v3/user/createWithList
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/user/createWithList -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"password\": \"gsx7vAJp\", " + 
                    " \"phone\": \"lTRyMpWrA\", " + 
                    " \"userStatus\": 598 " + 
                    " }, " + 
                    " { " + 
                    " \"phone\": \"ArGx8rcvaFqw\" " + 
                    " }, " + 
                    " { " + 
                    " \"username\": \"theUser\", " + 
                    " \"email\": \"GwdoR1dyb\", " + 
                    " \"phone\": \"8Cs_af0QrLpZ\" " + 
                    " }, " + 
                    " { " + 
                    " \"username\": \"theUser\", " + 
                    " \"firstName\": \"5NmFOHVADl4YH\", " + 
                    " \"lastName\": \"s\", " + 
                    " \"phone\": \"DOwaZDH058sJp\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 327, " + 
                    " \"firstName\": \"1Iq\", " + 
                    " \"password\": \"g1fZ\", " + 
                    " \"userStatus\": 40 " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/api/v3/user/createWithList")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/user
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test @Timeout(60)
    public void test_2_with500() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/api/v3/user
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/user -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/api/v3/user")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/store/order
    * Found 2 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   7
    */
    @Test @Timeout(60)
    public void test_3_with500() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/api/v3/store/order
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/store/order -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("quantity=7&shipDate=1914-08-17T-1%3A29%3A09.997%2B17%3A13&complete=true")
                .post(baseUrlOfSut + "/api/v3/store/order")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/v3/pet
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test @Timeout(60)
    public void test_4_with500() throws Exception {
        
        // Fault100. HTTP Status 500. PUT:/api/v3/pet
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/v3/pet -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"WyFFWIrgVoRDqEv\", " + 
                    " \"photoUrls\": [] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/pet
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test @Timeout(60)
    public void test_5_with500() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/api/v3/pet
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/pet -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"\", " + 
                    " \"category\": { " + 
                    " \"name\": \"Ywfgb\" " + 
                    " }, " + 
                    " \"photoUrls\": [], " + 
                    " \"status\": \"EVOMASTER\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_6() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/v3/pet/{petId} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("api_key", "b8b")
                .delete(baseUrlOfSut + "/api/v3/pet/625")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Pet deleted"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/v3/user/{username}
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_7() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/v3/user/{username} -> No response body is expected but one was found.
        given().accept("*/*")
                .contentType("application/xml")
                .put(baseUrlOfSut + "/api/v3/user/DraT8t3W58WBe")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Input error: unable to convert input to io.swagger.petstore.model.User"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v3/store/order
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_8() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/store/order -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/xml")
                .post(baseUrlOfSut + "/api/v3/store/order")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Input error: unable to convert input to io.swagger.petstore.model.Order"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v3/pet
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_9() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/pet -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/xml")
                .post(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Input error: unable to convert input to io.swagger.petstore.model.Pet"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/v3/pet
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_10() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/v3/pet -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/xml")
                .put(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Input error: unable to convert input to io.swagger.petstore.model.Pet"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v3/user
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_11() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/user -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/xml")
                .post(baseUrlOfSut + "/api/v3/user")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No User provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v3/user
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_12() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/user -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/json")
                .post(baseUrlOfSut + "/api/v3/user")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No User provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_13() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/pet/{petId} -> No response body is expected but one was found.
        given().accept("application/json")
                .post(baseUrlOfSut + "/api/v3/pet/493?status=vBeW6h8dJsma6A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No Name provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/api/v3/user/{username}
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_14() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/user/{username} -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/v3/user/idN1upv")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (403) GET:/api/v3/user/logout
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_15() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/user/logout -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/v3/user/logout")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (403) GET:/api/v3/store/inventory
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_16() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/store/inventory -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/v3/store/inventory")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (403) GET:/api/v3/store/order/{orderId}
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_17() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/store/order/{orderId} -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/v3/store/order/645")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (403) GET:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_18() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/pet/{petId} -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/v3/pet/993")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (403) GET:/api/v3/pet/findByTags
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_19() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/pet/findByTags -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/v3/pet/findByTags?tags=&tags=jTHSXI9K&tags=SwOBNldCfH&tags=sTVAFsEen4")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (403) GET:/api/v3/user/login
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_20() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/user/login -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/v3/user/login?username=aG1")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (403) GET:/api/v3/pet/findByStatus
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_21() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/v3/pet/findByStatus -> No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/v3/pet/findByStatus?status=available")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (404) POST:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_22() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/pet/{petId} -> No response body is expected but one was found.
        given().accept("application/json")
                .post(baseUrlOfSut + "/api/v3/pet/859?" + 
                    "name=0BqcSbAsZOsUe&" + 
                    "status=gJCZ7")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Pet not found"));
    }
    
    
    /**
    * Calls:
    * (415) POST:/api/v3/pet/{petId}/uploadImage
    * Found 1 potential fault of type-code 200
    */
    @Test @Timeout(60)
    public void test_23() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/v3/pet/{petId}/uploadImage -> No response body is expected but one was found.
        given().accept("application/json")
                .contentType("application/json")
                .post(baseUrlOfSut + "/api/v3/pet/33/uploadImage")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(415.0))
                .body("'message'", containsString("HTTP 415 Unsupported Media Type"));
    }


}
